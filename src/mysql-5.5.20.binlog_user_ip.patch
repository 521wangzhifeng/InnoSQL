Index: sql/mysqld.cc
===================================================================
--- sql/mysqld.cc	(.../trunk/mysql-5.5.20%20binlog_user_ip)	(revision 282)
+++ sql/mysqld.cc	(.../branches/mysql-5.5.20_binlog_user_ip)	(revision 491)
@@ -287,6 +287,9 @@
   Used with --help for detailed option
 */
 static my_bool opt_help= 0, opt_verbose= 0;
+/*
+  Used with --binlog-user-ip for recording user and ip in binnry log
+*/
 
 arg_cmp_func Arg_comparator::comparator_matrix[5][2] =
 {{&Arg_comparator::compare_string,     &Arg_comparator::compare_e_string},
Index: sql/mysqld.h
===================================================================
--- sql/mysqld.h	(.../trunk/mysql-5.5.20%20binlog_user_ip)	(revision 282)
+++ sql/mysqld.h	(.../branches/mysql-5.5.20_binlog_user_ip)	(revision 491)
@@ -216,7 +216,9 @@
 extern char err_shared_dir[];
 extern TYPELIB thread_handling_typelib;
 extern my_decimal decimal_zero;
+extern my_bool opt_binlog_user_ip;
 
+
 /*
   THR_MALLOC is a key which will be used to set/get MEM_ROOT** for a thread,
   using my_pthread_setspecific_ptr()/my_thread_getspecific_ptr().
Index: sql/log_event.cc
===================================================================
--- sql/log_event.cc	(.../trunk/mysql-5.5.20%20binlog_user_ip)	(revision 282)
+++ sql/log_event.cc	(.../branches/mysql-5.5.20_binlog_user_ip)	(revision 491)
@@ -14,7 +14,6 @@
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */
 
-
 #ifdef MYSQL_CLIENT
 
 #include "sql_priv.h"
@@ -639,7 +638,7 @@
   @return
   returns the human readable name of the event's type
 */
-
+my_bool opt_binlog_user_ip= 0;
 const char* Log_event::get_type_str(Log_event_type type)
 {
   switch(type) {
@@ -2193,7 +2192,6 @@
     EVENT_LEN_OFFSET as we don't yet know how many status variables we
     will print!
 */
-
 bool Query_log_event::write(IO_CACHE* file)
 {
   uchar buf[QUERY_HEADER_LEN + MAX_SIZE_LOG_EVENT_STATUS];
@@ -2403,20 +2401,67 @@
   status_vars_len= (uint) (start-start_of_status);
   DBUG_ASSERT(status_vars_len <= MAX_SIZE_LOG_EVENT_STATUS);
   int2store(buf + Q_STATUS_VARS_LEN_OFFSET, status_vars_len);
-
   /*
+   add user and ip into query event
+  */
+  ulong user_len = 0;
+  if(0 != thd->security_ctx->user)
+  {
+      user_len = strlen(thd->security_ctx->user);
+  }
+  ulong ip_host_len = strlen("unknow");
+  const char* ip_host = "unknow";
+  if(0 != thd->security_ctx->ip)
+  {
+      ip_host_len = strlen(thd->security_ctx->ip);
+      ip_host = thd->security_ctx->ip;
+  }
+  else if(0 != thd->security_ctx->host)
+  {
+      ip_host_len = strlen(thd->security_ctx->host);
+      ip_host = thd->security_ctx->host;
+  }
+    /*
     Calculate length of whole event
     The "1" below is the \0 in the db's length
   */
   event_length= (uint) (start-buf) + get_post_header_size_for_derived() + db_len + 1 + q_len;
-
-  return (write_header(file, event_length) ||
+  if(opt_binlog_user_ip)
+  {
+   event_length += 5 + user_len + ip_host_len;
+  }
+  bool rflag = 0;
+  rflag = (write_header(file, event_length) ||
           my_b_safe_write(file, (uchar*) buf, QUERY_HEADER_LEN) ||
           write_post_header_for_derived(file) ||
           my_b_safe_write(file, (uchar*) start_of_status,
                           (uint) (start-start_of_status)) ||
-          my_b_safe_write(file, (db) ? (uchar*) db : (uchar*)"", db_len + 1) ||
-          my_b_safe_write(file, (uchar*) query, q_len)) ? 1 : 0;
+          my_b_safe_write(file, (db) ? (uchar*) db : (uchar*)"", db_len + 1));
+
+  if(!opt_binlog_user_ip)
+  {
+   /*
+    don't need to record user and ip in binary log
+   */
+    rflag = rflag || my_b_safe_write(file, (uchar*) query, q_len);
+  }
+  else
+  {
+    /*
+     add user and ip into query event
+    */
+    uchar *query_tmp = (uchar*)my_malloc(q_len + 1, MYF(MY_WME));
+    memmove(query_tmp, query, q_len);
+    query_tmp[q_len] = 0;
+    rflag = rflag || my_b_safe_write(file, (uchar*) query_tmp, q_len);
+    my_free(query_tmp);
+    rflag = rflag || (my_b_safe_write(file, (uchar*) "/*", 2) ||
+		  my_b_safe_write(file, (uchar*) thd->security_ctx->user, user_len) ||
+          my_b_safe_write(file, (uchar*) "@", 1) ||
+          my_b_safe_write(file, (uchar*) ip_host, ip_host_len) ||
+		  my_b_safe_write(file, (uchar*) "*/", 2));
+  }
+  return rflag ? 1 : 0;
 }
 
 /**
@@ -2693,7 +2738,7 @@
   } while (0)
 
 
-/**
+/*
   This is used by the SQL slave thread to prepare the event before execution.
 */
 Query_log_event::Query_log_event(const char* buf, uint event_len,
@@ -2947,7 +2992,14 @@
   start[data_len]= '\0';              // End query with \0 (For safetly)
   db= (char *)start;
   query= (char *)(start + db_len + 1);
-  q_len= data_len - db_len -1;
+  if(opt_binlog_user_ip)
+  {
+    q_len= strlen(query);
+  }
+  else
+  {
+    q_len= data_len - db_len -1;
+  }
   DBUG_VOID_RETURN;
 }
 
@@ -3128,7 +3180,6 @@
 void Query_log_event::print(FILE* file, PRINT_EVENT_INFO* print_event_info)
 {
   Write_on_release_cache cache(&print_event_info->head_cache, file);
-
   print_query_header(&cache, print_event_info);
   my_b_write(&cache, (uchar*) query, q_len);
   my_b_printf(&cache, "\n%s\n", print_event_info->delimiter);
Index: sql/sys_vars.cc
===================================================================
--- sql/sys_vars.cc	(.../trunk/mysql-5.5.20%20binlog_user_ip)	(revision 282)
+++ sql/sys_vars.cc	(.../branches/mysql-5.5.20_binlog_user_ip)	(revision 491)
@@ -1009,6 +1009,15 @@
        CMD_LINE(OPT_ARG, OPT_LOG_ERROR),
        IN_FS_CHARSET, DEFAULT(disabled_my_option));
 
+/**
+  Used for recording user and ip in binary log
+**/
+static Sys_var_mybool Sys_binlog_user_ip(
+       "binlog_user_ip",
+       "Record user and ip of a statement in binlog",
+       READ_ONLY GLOBAL_VAR(opt_binlog_user_ip),
+       CMD_LINE(OPT_ARG), DEFAULT(FALSE));
+
 static Sys_var_mybool Sys_log_queries_not_using_indexes(
        "log_queries_not_using_indexes",
        "Log queries that are executed without benefit of any index to the "
