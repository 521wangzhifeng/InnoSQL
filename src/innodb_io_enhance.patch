Index: storage/innobase/srv/srv0srv.c
===================================================================
--- storage/innobase/srv/srv0srv.c	(revision 233)
+++ storage/innobase/srv/srv0srv.c	(working copy)
@@ -85,7 +85,26 @@
 #include "os0sync.h" /* for HAVE_ATOMIC_BUILTINS */
 #include "mysql/plugin.h"
 #include "mysql/service_thd_wait.h"
+#ifdef UNIV_LINUX
+#include <sys/types.h>
+#include <sys/syscall.h>
+#endif
 
+/** whether or not to flush neighbor pages */
+UNIV_INTERN my_bool	srv_flush_neighbors	= TRUE;
+
+/** purge thread process no */
+UNIV_INTERN ulint	srv_purge_thread_process_no	= 0;
+/** purge thread id */
+UNIV_INTERN ulint	srv_purge_thread_id		= 0;
+
+/** pages flush from LRU list */
+UNIV_INTERN ulint	srv_flush_lru_list = 0;
+/** pages flush in async mode */
+UNIV_INTERN ulint	srv_async_flush = 0;
+/** pages flush in sync mode */
+UNIV_INTERN ulint	srv_sync_flush = 0;
+
 /* The following counter is incremented whenever there is some user activity
 in the server */
 UNIV_INTERN ulint	srv_activity_count	= 0;
@@ -1960,10 +1979,21 @@
 		(ulong) srv_main_thread_process_no,
 		(ulong) srv_main_thread_id,
 		srv_main_thread_op_info);
+	if (srv_purge_thread_id > 0){
+		/* use single purge thread */
+		fprintf(file, "Purge thread process no. %lu, id %lu\n",
+			(ulong) srv_purge_thread_process_no,
+			(ulong) srv_purge_thread_id);
+	}
 #else
 	fprintf(file, "Main thread id %lu, state: %s\n",
 		(ulong) srv_main_thread_id,
 		srv_main_thread_op_info);
+	if (srv_purge_thread_id > 0){
+		/* use single purge thread */
+		fprintf(file, "Purge thread id %lu\n",
+			(ulong) srv_purge_thread_id);
+	}
 #endif
 	fprintf(file,
 		"Number of rows inserted " ULINTPF
@@ -2016,6 +2046,10 @@
 
 	mutex_enter(&srv_innodb_monitor_mutex);
 
+	export_vars.innodb_flush_lru_list = srv_flush_lru_list;
+	export_vars.innodb_flush_async = srv_async_flush;
+	export_vars.innodb_flush_sync = srv_sync_flush;
+
 	export_vars.innodb_data_pending_reads
 		= os_n_pending_reads;
 	export_vars.innodb_data_pending_writes
@@ -2673,7 +2707,11 @@
 	pfs_register_thread(srv_master_thread_key);
 #endif
 
+#ifdef UNIV_LINUX
+	srv_main_thread_process_no = (ulint)syscall(SYS_gettid);
+#else
 	srv_main_thread_process_no = os_proc_get_number();
+#endif
 	srv_main_thread_id = os_thread_pf(os_thread_get_curr_id());
 
 	mutex_enter(&kernel_mutex);
@@ -3105,6 +3143,13 @@
 
 	ut_a(srv_n_purge_threads == 1);
 
+#ifdef UNIV_LINUX
+	srv_purge_thread_process_no = (ulint)syscall(SYS_gettid);
+#else
+	srv_purge_thread_process_no = os_proc_get_number();
+#endif
+	srv_purge_thread_id = os_thread_pf(os_thread_get_curr_id());
+
 #ifdef UNIV_PFS_THREAD
 	pfs_register_thread(srv_purge_thread_key);
 #endif /* UNIV_PFS_THREAD */
Index: storage/innobase/srv/srv0start.c
===================================================================
--- storage/innobase/srv/srv0start.c	(revision 233)
+++ storage/innobase/srv/srv0start.c	(working copy)
@@ -1439,15 +1439,31 @@
 	}
 #endif /* UNIV_LOG_ARCHIVE */
 
-	if (srv_n_log_files * srv_log_file_size >= 262144) {
+	if (sizeof(ulint) == 4 && srv_n_log_files * srv_log_file_size >= 262144) {
 		ut_print_timestamp(stderr);
 		fprintf(stderr,
 			" InnoDB: Error: combined size of log files"
-			" must be < 4 GB\n");
+			" must be < 4 GB on 32-bit system.\n");
 
 		return(DB_ERROR);
 	}
 
+	if (srv_n_log_files * srv_log_file_size >= ULINT_MAX) {
+		/* fil_io() takes ulint as an argument and we are passing
+		(next_offset / UNIV_PAGE_SIZE) to it in log_group_write_buf().
+		So (next_offset / UNIV_PAGE_SIZE) must be less than ULINT_MAX.
+		So next_offset must be < ULINT_MAX * UNIV_PAGE_SIZE. This
+		means that we are limited to ULINT_MAX * UNIV_PAGE_SIZE which
+		is 64 TB on 32 bit systems. */
+		ut_print_timestamp(stderr);
+		fprintf(stderr,
+			" InnoDB: Error: combined size of log files"
+			" must be < %lu GB\n",
+			ULINT_MAX / 1073741824 * UNIV_PAGE_SIZE);
+
+		return(DB_ERROR);
+	}
+
 	sum_of_new_sizes = 0;
 
 	for (i = 0; i < srv_n_data_files; i++) {
Index: storage/innobase/buf/buf0flu.c
===================================================================
--- storage/innobase/buf/buf0flu.c	(revision 233)
+++ storage/innobase/buf/buf0flu.c	(working copy)
@@ -1378,7 +1378,7 @@
 
 	ut_ad(flush_type == BUF_FLUSH_LRU || flush_type == BUF_FLUSH_LIST);
 
-	if (UT_LIST_GET_LEN(buf_pool->LRU) < BUF_LRU_OLD_MIN_LEN) {
+	if (UT_LIST_GET_LEN(buf_pool->LRU) < BUF_LRU_OLD_MIN_LEN || !srv_flush_neighbors) {
 		/* If there is little space, it is better not to flush
 		any block except from the end of the LRU list */
 
@@ -1580,6 +1580,7 @@
 	flush. When estimating the desired rate at which flush_list
 	should be flushed, we factor in this value. */
 	buf_lru_flush_page_count += count;
+	srv_flush_lru_list = buf_lru_flush_page_count;
 
 	ut_ad(buf_pool_mutex_own(buf_pool));
 
@@ -1783,6 +1784,7 @@
 		flush. When estimating the desired rate at which flush_list
 		should be flushed we factor in this value. */
 		buf_lru_flush_page_count += page_count;
+		srv_flush_lru_list = buf_lru_flush_page_count;
 	}
 }
 
Index: storage/innobase/buf/buf0buf.c
===================================================================
--- storage/innobase/buf/buf0buf.c	(revision 233)
+++ storage/innobase/buf/buf0buf.c	(working copy)
@@ -4619,10 +4619,15 @@
 	happening with LRU eviction. */
 	fprintf(file,
 		"LRU len: %lu, unzip_LRU len: %lu\n"
-		"I/O sum[%lu]:cur[%lu], unzip sum[%lu]:cur[%lu]\n",
+		"I/O sum[%lu]:cur[%lu], unzip sum[%lu]:cur[%lu]\n"
+		"Async Flush: %lu, Sync Flush: %lu, LRU List Flush: %lu, Flush List Flush: %lu\n",
 		pool_info->lru_len, pool_info->unzip_lru_len,
 		pool_info->io_sum, pool_info->io_cur,
-		pool_info->unzip_sum, pool_info->unzip_cur);
+		pool_info->unzip_sum, pool_info->unzip_cur,
+		(ulong)srv_async_flush,
+		(ulong)srv_sync_flush,
+		(ulong)srv_flush_lru_list,
+		(ulong)(srv_buf_pool_flushed - srv_flush_lru_list));
 }
 
 /*********************************************************************//**
Index: storage/innobase/handler/ha_innodb.cc
===================================================================
--- storage/innobase/handler/ha_innodb.cc	(revision 233)
+++ storage/innobase/handler/ha_innodb.cc	(working copy)
@@ -648,6 +648,12 @@
   (char*) &export_vars.innodb_dblwr_pages_written,	  SHOW_LONG},
   {"dblwr_writes",
   (char*) &export_vars.innodb_dblwr_writes,		  SHOW_LONG},
+  {"flush_lru_list",
+  (char*) &export_vars.innodb_flush_lru_list,		  SHOW_LONG},
+  {"flush_async",
+  (char*) &export_vars.innodb_flush_async,		  SHOW_LONG},
+  {"flush_sync",
+  (char*) &export_vars.innodb_flush_sync,		  SHOW_LONG},
   {"have_atomic_builtins",
   (char*) &export_vars.innodb_have_atomic_builtins,	  SHOW_BOOL},
   {"log_waits",
@@ -11438,6 +11444,11 @@
   "trigger a readahead.",
   NULL, NULL, 56, 0, 64, 0);
 
+static MYSQL_SYSVAR_BOOL(flush_neighbors, srv_flush_neighbors,
+  PLUGIN_VAR_NOCMDARG,
+  "Flush neighbors from buffer pool when flushing a page.",
+  NULL, NULL, TRUE);
+
 static struct st_mysql_sys_var* innobase_system_variables[]= {
   MYSQL_SYSVAR(additional_mem_pool_size),
   MYSQL_SYSVAR(autoextend_increment),
@@ -11459,6 +11470,7 @@
   MYSQL_SYSVAR(file_format_max),
   MYSQL_SYSVAR(flush_log_at_trx_commit),
   MYSQL_SYSVAR(flush_method),
+  MYSQL_SYSVAR(flush_neighbors),
   MYSQL_SYSVAR(force_recovery),
   MYSQL_SYSVAR(large_prefix),
   MYSQL_SYSVAR(force_load_corrupted),
Index: storage/innobase/log/log0log.c
===================================================================
--- storage/innobase/log/log0log.c	(revision 233)
+++ storage/innobase/log/log0log.c	(working copy)
@@ -576,7 +576,9 @@
 
 	offset = (gr_lsn_size_offset + difference) % group_size;
 
-	ut_a(offset < (((ib_int64_t) 1) << 32)); /* offset must be < 4 GB */
+	if (sizeof(ulint) == 4) {
+		ut_a(offset < (((ib_int64_t) 1) << 32)); /* offset must be < 4 GB */
+	}
 
 	/* fprintf(stderr,
 	"Offset is %lu gr_lsn_offset is %lu difference is %lu\n",
@@ -2120,10 +2122,14 @@
 
 		sync = TRUE;
 		advance = 2 * (age - log->max_modified_age_sync);
+
+		srv_sync_flush++;;
 	} else if (age > log->max_modified_age_async) {
 
 		/* A flush is not urgent: we do an asynchronous preflush */
 		advance = age - log->max_modified_age_async;
+
+		srv_async_flush++;
 	} else {
 		advance = 0;
 	}
Index: storage/innobase/include/srv0srv.h
===================================================================
--- storage/innobase/include/srv0srv.h	(revision 233)
+++ storage/innobase/include/srv0srv.h	(working copy)
@@ -48,6 +48,16 @@
 #include "que0types.h"
 #include "trx0types.h"
 
+/** Whether or not to flush neighbor pages */
+extern my_bool	srv_flush_neighbors;
+
+/** pages flush from LRU list */
+extern ulint	srv_flush_lru_list;
+/** pages flush in async mode */
+extern ulint	srv_async_flush;
+/** pages flush in sync mode */
+extern ulint	srv_sync_flush;
+
 extern const char*	srv_main_thread_op_info;
 
 /** Prefix used by MySQL to indicate pre-5.1 table name encoding */
@@ -713,6 +723,9 @@
 	ulint innodb_buffer_pool_read_ahead_evicted;/*!< srv_read_ahead evicted*/
 	ulint innodb_dblwr_pages_written;	/*!< srv_dblwr_pages_written */
 	ulint innodb_dblwr_writes;		/*!< srv_dblwr_writes */
+	ulint innodb_flush_lru_list;
+	ulint innodb_flush_async;
+	ulint innodb_flush_sync;
 	ibool innodb_have_atomic_builtins;	/*!< HAVE_ATOMIC_BUILTINS */
 	ulint innodb_log_waits;			/*!< srv_log_waits */
 	ulint innodb_log_write_requests;	/*!< srv_log_write_requests */
