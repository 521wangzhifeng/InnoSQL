Index: client/mysqlbinlog.cc
===================================================================
--- client/mysqlbinlog.cc	(revision 476)
+++ client/mysqlbinlog.cc	(working copy)
@@ -668,7 +668,36 @@
   DBUG_RETURN(OK_CONTINUE);
 }
 
+/**
+  Attach a Table_metadata event to its respective Table_map event;
 
+  @param event The Table_metadata event.
+  @param print_event_info Print context.
+
+  @remark Upon successful attachment, the Table_map takes ownership
+          over the Table_metadata event.
+
+  @return false if successful, true otherwise.
+*/
+static bool
+attach_to_table_map_event(Table_metadata_log_event *event,
+                          PRINT_EVENT_INFO *print_event_info)
+{
+  Table_map_log_event *table_map;
+  ulong table_map_id= event->get_table_id();
+  DBUG_ENTER("process_table_metadata_event");
+
+  if (!(table_map= print_event_info->m_table_map.get_table(table_map_id)))
+    table_map= print_event_info->m_table_map_ignored.get_table(table_map_id);
+
+  if (!table_map)
+    DBUG_RETURN(true);
+
+  table_map->set_table_metadata_event(event);
+
+  DBUG_RETURN(false);
+}
+
 /**
   Print the given event, and either delete it or delegate the deletion
   to someone else.
@@ -903,6 +932,13 @@
 	my_free(fname);
       break;
     }
+    case TABLE_METADATA_EVENT:
+    {
+      Table_metadata_log_event *event= (Table_metadata_log_event *) ev;
+      destroy_evt= attach_to_table_map_event(event, print_event_info);
+      event->print(result_file, print_event_info);
+      break;
+    }
     case TABLE_MAP_EVENT:
     {
       Table_map_log_event *map= ((Table_map_log_event *)ev);
Index: mysql-test/include/show_binlog_events2.inc
===================================================================
--- mysql-test/include/show_binlog_events2.inc	(revision 476)
+++ mysql-test/include/show_binlog_events2.inc	(working copy)
@@ -1,4 +1,4 @@
---let $binlog_start=107
+--let $binlog_start=130
 --replace_result $binlog_start <binlog_start>
 --replace_column 2 # 5 #
 --replace_regex /\/\* xid=.* \*\//\/* XID *\// /table_id: [0-9]+/table_id: #/
Index: sql/handler.cc
===================================================================
--- sql/handler.cc	(revision 476)
+++ sql/handler.cc	(working copy)
@@ -4648,6 +4648,10 @@
           */
           if (unlikely(error))
             DBUG_RETURN(1);
+
+          if (thd->variables.binlog_row_write_table_metadata &&
+              unlikely(thd->binlog_write_table_metadata(table, has_trans)))
+            DBUG_RETURN(1);
         }
       }
     }
Index: sql/log.cc
===================================================================
--- sql/log.cc	(revision 476)
+++ sql/log.cc	(working copy)
@@ -4734,6 +4734,32 @@
 }
 
 /**
+  Write a table metadata event to the binary log.
+
+  @param table             a pointer to the table.
+  @param is_transactional  @c true indicates a transactional table,
+                           otherwise @c false a non-transactional.
+
+  @return zero on success, nonzero on failure.
+*/
+int THD::binlog_write_table_metadata(TABLE *table, bool is_transactional)
+{
+  DBUG_ENTER("THD::binlog_write_table_metadata");
+
+  DBUG_ASSERT(binlog_table_maps);
+
+  Table_metadata_log_event event(this, table, is_transactional);
+
+  binlog_cache_mngr *const cache_mngr=
+    (binlog_cache_mngr *) thd_get_ha_data(this, binlog_hton);
+
+  IO_CACHE *cache=
+    cache_mngr->get_binlog_cache_log(use_trans_cache(this, is_transactional));
+
+  DBUG_RETURN(event.write(cache));
+}
+
+/**
   This function retrieves a pending row event from a cache which is
   specified through the parameter @c is_transactional. Respectively, when it
   is @c true, the pending event is returned from the transactional cache.
Index: sql/log_event.cc
===================================================================
--- sql/log_event.cc	(revision 476)
+++ sql/log_event.cc	(working copy)
@@ -669,6 +669,7 @@
   case BEGIN_LOAD_QUERY_EVENT: return "Begin_load_query";
   case EXECUTE_LOAD_QUERY_EVENT: return "Execute_load_query";
   case INCIDENT_EVENT: return "Incident";
+  case TABLE_METADATA_EVENT: return "Table_metadata";
   default: return "Unknown";				/* impossible */
   }
 }
@@ -1308,6 +1309,9 @@
     case TABLE_MAP_EVENT:
       ev = new Table_map_log_event(buf, event_len, description_event);
       break;
+    case TABLE_METADATA_EVENT:
+      ev = new Table_metadata_log_event(buf, event_len, description_event);
+      break;
 #endif
     case BEGIN_LOAD_QUERY_EVENT:
       ev = new Begin_load_query_log_event(buf, event_len, description_event);
@@ -1867,6 +1871,7 @@
   @param[in] file              IO cache
   @param[in] td                Table definition
   @param[in] print_event_into  Print parameters
+  @param[in] map               Table_map event.
   @param[in] cols_bitmap       Column bitmaps.
   @param[in] value             Pointer to packed row
   @param[in] prefix            Row's SQL clause ("SET", "WHERE", etc)
@@ -1878,6 +1883,7 @@
 size_t
 Rows_log_event::print_verbose_one_row(IO_CACHE *file, table_def *td,
                                       PRINT_EVENT_INFO *print_event_info,
+				      Table_map_log_event *map,
                                       MY_BITMAP *cols_bitmap,
                                       const uchar *value, const uchar *prefix)
 {
@@ -1892,19 +1898,26 @@
   
   for (size_t i= 0; i < td->size(); i ++)
   {
+    LEX_CSTRING name;
+
     int is_null= (null_bits[null_bit_index / 8] 
                   >> (null_bit_index % 8))  & 0x01;
 
     if (bitmap_is_set(cols_bitmap, i) == 0)
       continue;
-    
+
+    name= map->get_column_name(i);
+    if (name.length)
+      my_b_printf(file, "###   %.*b=", name.length, name.str);
+    else
+      my_b_printf(file, "###   @%d=", i + 1);
+
     if (is_null)
     {
-      my_b_printf(file, "###   @%d=NULL", i + 1);
+	my_b_printf(file, "NULL", i + 1);
     }
     else
     {
-      my_b_printf(file, "###   @%d=", i + 1);
       size_t size= log_event_print_value(file, value,
                                          td->type(i), td->field_metadata(i),
                                          typestr, sizeof(typestr));
@@ -1987,7 +2000,7 @@
                       map->get_db_name(), map->get_table_name());
     /* Print the first image */
     if (!(length= print_verbose_one_row(file, td, print_event_info,
-                                  &m_cols, value,
+                                  map, &m_cols, value,
                                   (const uchar*) sql_clause1)))
       goto end;
     value+= length;
@@ -1996,7 +2009,7 @@
     if (sql_clause2)
     {
       if (!(length= print_verbose_one_row(file, td, print_event_info,
-                                      &m_cols_ai, value,
+                                      map, &m_cols_ai, value,
                                       (const uchar*) sql_clause2)))
         goto end;
       value+= length;
@@ -3844,11 +3857,8 @@
     */
     if (post_header_len)
     {
-#ifndef DBUG_OFF
-      // Allows us to sanity-check that all events initialized their
-      // events (see the end of this 'if' block).
-      memset(post_header_len, 255, number_of_event_types*sizeof(uint8));
-#endif
+      /* Zero out reserved/unused event types. */
+      memset(post_header_len, 0, number_of_event_types*sizeof(uint8));
 
       /* Note: all event types must explicitly fill in their lengths here. */
       post_header_len[START_EVENT_V3-1]= START_V3_HEADER_LEN;
@@ -3901,10 +3911,7 @@
       post_header_len[INCIDENT_EVENT-1]= INCIDENT_HEADER_LEN;
       post_header_len[HEARTBEAT_LOG_EVENT-1]= 0;
 
-      // Sanity-check that all post header lengths are initialized.
-      int i;
-      for (i=0; i<number_of_event_types; i++)
-        DBUG_ASSERT(post_header_len[i] != 255);
+      post_header_len[TABLE_METADATA_EVENT-1]= TABLE_METADATA_HEADER_LEN;
     }
     break;
 
@@ -8295,6 +8302,10 @@
   DBUG_PRINT("info",("event_len: %u  common_header_len: %d  post_header_len: %d",
                      event_len, common_header_len, post_header_len));
 
+#ifdef MYSQL_CLIENT
+  m_table_metadata= NULL;
+#endif
+
   /*
     Don't print debug messages when running valgrind since they can
     trigger false warnings.
@@ -8385,6 +8396,9 @@
 {
   my_free(m_meta_memory);
   my_free(m_memory);
+#ifdef MYSQL_CLIENT
+  delete m_table_metadata;
+#endif
 }
 
 /*
@@ -8695,9 +8709,564 @@
     print_base64(&print_event_info->body_cache, print_event_info, TRUE);
   }
 }
+
+
+LEX_CSTRING Table_map_log_event::get_column_name(uint column) const
+{
+  LEX_CSTRING empty= {NULL,0};
+
+  if (m_table_metadata && m_table_metadata->get_column_descriptor(column))
+    return m_table_metadata->get_column_descriptor(column)->name;
+
+  return empty;
+}
 #endif
 
+
 /**************************************************************************
+      Table_metadata_log_event member functions and support functions
+**************************************************************************/
+
+/**
+  Calculate the variable storage length for a given string length.
+
+  @see net_store_length
+
+  @param length The string length.
+
+  @return The required storage for the variable-length string.
+*/
+static unsigned int
+length_of_encoded_string(ulonglong len)
+{
+  /*
+    The prefix length is a 1-, 2-, 3-, or 8-byte integer that represents
+    the length of the string in bytes. See net_store_length for details.
+  */
+  if (len < 251ULL)
+    len+= 1;
+  else if (len < 65536ULL)
+    len+= 3;
+  else if (len < 16777216ULL)
+    len+= 4;
+  else
+    len+= 9;
+
+  return len;
+}
+
+/**
+  Get the length prefix from the head of the data buffer.
+
+  @param buf      Reference to the head of the buffer.
+  @param buf_len  Length of the data buffer.
+
+  @return The length of the encoded string.
+*/
+static uint
+get_string_field_length(const char **buf, uint buf_len)
+{
+  uint len= UINT_MAX;
+  const char *ptr= (*buf)++;
+
+  /*
+    The first byte determines whether the the prefix length is 1-byte
+    (251), or a following 2- (252), 3- (253), or 8-byte (254) integer
+    that represents the length of the string in bytes.
+  */
+  uchar byte= *ptr;
+
+  if (byte < 251)
+  {
+    len= byte;
+  }
+  /* Ensure that the string is nonzero. */
+  else if (byte == 252 && buf_len > 3)
+  {
+    (*buf)+= 2;
+    len= uint2korr(ptr);
+  }
+  /* uint3korr might read up to four bytes. */
+  else if (byte == 253 && buf_len > 4)
+  {
+    (*buf)+= 3;
+    len= uint3korr(ptr);
+  }
+  /* Unlikely, but handle +16KB strings. */
+  else if (byte == 254 && buf_len > 9)
+  {
+    (*buf)+= 8;
+    len= uint8korr(ptr);
+  }
+
+  return len;
+}
+
+#if defined(MYSQL_SERVER)
+
+/**
+  Applies a function object to a column descriptor of each field in an array.
+
+  @param thd          The current thread.
+  @param field_array  Array of fields.
+  @param functor      Function object.
+
+  @return FALSE on success, TRUE otherwise.
+*/
+template<typename Functor>
+static bool
+for_each_field(THD *thd, Field **field_array, Functor &functor)
+{
+  Field *field;
+  ulong length;
+  String type_name_str;
+  CHARSET_INFO *charset= system_charset_info;
+  Table_metadata_binary_format::Column_descriptor descriptor;
+  const LEX_CSTRING *string_array[]=
+    {&descriptor.name, &descriptor.type_name, &descriptor.comment};
+  char type_name_buf[MAX_FIELD_WIDTH];
+
+  for (Field **iter= field_array; (field= *iter); iter++)
+  {
+    length= Table_metadata_binary_format::CD_FIXED_LENGTH;
+
+    /* Reset the internal state/buffer, frees dynamically allocated memory. */
+    type_name_str.set(type_name_buf, sizeof(type_name_buf), charset);
+
+    /* Retrieving the type name might have failed. */
+    if (field->sql_type(type_name_str), thd->is_error())
+      break;
+
+    descriptor.name.str= field->field_name;
+    descriptor.name.length= strlen(field->field_name);
+
+    descriptor.type_name.str= type_name_str.ptr();
+    descriptor.type_name.length= type_name_str.length();
+
+    descriptor.comment.str= field->comment.str;
+    descriptor.comment.length= field->comment.length;
+
+    /* Calculate the final length of the column descriptor. */
+    for (uint i= 0; i < array_elements(string_array); i++)
+      length+= length_of_encoded_string(string_array[i]->length);
+
+    descriptor.length= length;
+    descriptor.type= field->type();
+    descriptor.display_length= field->field_length;
+    descriptor.scale= field->decimals();
+    descriptor.charset= field->charset()->number;
+    descriptor.flags= field->flags;
+
+    if (functor(&descriptor))
+      break;
+  }
+
+  return field;
+}
+
+/**
+  Write the data header of a Table_metadata event.
+
+  @param cache  IO cache.
+
+  @return FALSE on success, TRUE otherwise.
+*/
+bool
+Table_metadata_log_event::write_data_header(IO_CACHE *cache)
+{
+  uchar data_header_buf[DH_FIXED_LENGTH];
+  DBUG_ENTER("Table_metadata_log_event::write_data_header");
+
+  if (!m_is_valid)
+    DBUG_RETURN(true);
+
+  /* Type of table_map_id might not be wide enough for int6store. */
+  ulonglong table_map_id= m_table->s->table_map_id;
+
+  int6store(data_header_buf + DH_TABLE_ID_OFFSET, table_map_id);
+  int2store(data_header_buf + DH_COLUMNS_OFFSET, m_table->s->fields);
+  int2store(data_header_buf + DH_FLAGS_OFFSET, 0);
+
+  DBUG_RETURN(my_b_safe_write(cache, data_header_buf, DH_FIXED_LENGTH));
+}
+
+/** Function object for writing a column descriptor. */
+struct Table_metadata_log_event::Data_body_functor
+{
+  IO_CACHE *m_cache;
+  uchar m_data_buf[CD_FIXED_LENGTH];
+  uchar m_len_buf[sizeof(ulonglong)];
+
+  Data_body_functor(IO_CACHE *cache)
+    : m_cache(cache) {}
+
+  bool operator()(const Column_descriptor *descriptor)
+  { return write(descriptor); }
+
+  bool write(const Column_descriptor *);
+  bool write_length_encoded_string(const LEX_CSTRING *);
+};
+
+/**
+  Write a length-prefixed string to an IO cache.
+
+  @param str    The string.
+
+  @return FALSE on success, TRUE otherwise.
+*/
+bool
+Table_metadata_log_event::Data_body_functor::
+  write_length_encoded_string(const LEX_CSTRING *str)
+{
+  uchar *ptr;
+
+  ptr= net_store_length(m_len_buf, str->length);
+
+  return my_b_safe_write(m_cache, m_len_buf, ptr - m_len_buf) ||
+         my_b_safe_write(m_cache, (const uchar *) str->str, str->length);
+}
+
+/**
+  Write a column description to an IO cache.
+
+  @param descriptor   A column descriptor object.
+
+  @return FALSE on success, TRUE otherwise.
+*/
+bool
+Table_metadata_log_event::Data_body_functor::write(
+  const Column_descriptor *descriptor)
+{
+  const LEX_CSTRING *string_array[]=
+    {&descriptor->name, &descriptor->type_name, &descriptor->comment};
+
+  int4store(m_data_buf + CD_LENGTH_OFFSET, descriptor->length);
+  m_data_buf[CD_TYPE_OFFSET]= descriptor->type;
+  int4store(m_data_buf + CD_DISPLAY_LENGTH_OFFSET, descriptor->display_length);
+  m_data_buf[CD_SCALE_OFFSET]= descriptor->scale;
+  int2store(m_data_buf + CD_CHARSET_OFFSET, descriptor->charset);
+  int2store(m_data_buf + CD_FLAGS_OFFSET, descriptor->flags);
+
+  if (my_b_safe_write(m_cache, m_data_buf, CD_FIXED_LENGTH))
+    return true;
+
+  for (uint i= 0; i < array_elements(string_array); i++)
+    if (write_length_encoded_string(string_array[i]))
+      return true;
+
+  return false;
+}
+
+/**
+  Write the data body of a Table_metadata event.
+
+  @param cache  IO cache.
+
+  @return FALSE on success, TRUE otherwise.
+*/
+bool
+Table_metadata_log_event::write_data_body(IO_CACHE *cache)
+{
+  bool status;
+  Data_body_functor functor(cache);
+  DBUG_ENTER("Table_metadata_log_event::write_data_body");
+
+  status= for_each_field(thd, m_table->field, functor);
+
+  DBUG_RETURN(status);
+}
+
+/** Function object for computing the length of column descriptors. */
+struct Table_metadata_log_event::Data_size_functor
+{
+  int m_length;
+  Data_size_functor(int len) : m_length(len) {}
+  bool operator()(const Column_descriptor *descriptor)
+  { m_length+= descriptor->length; return false; }
+};
+
+/**
+  Write this Table_metadata event to a given IO cache.
+
+  @param cache  IO cache.
+
+  @return FALSE on success, TRUE otherwise.
+*/
+int
+Table_metadata_log_event::get_data_size()
+{
+  Data_size_functor functor(DH_FIXED_LENGTH);
+  DBUG_ENTER("Table_metadata_log_event::get_data_size");
+
+  if (for_each_field(thd, m_table->field, functor))
+    DBUG_RETURN(0);
+
+  m_is_valid= true;
+
+  DBUG_RETURN(functor.m_length);
+}
+
+#endif /* MYSQL_SERVER */
+
+#if defined(MYSQL_SERVER) && defined(HAVE_REPLICATION)
+
+int Table_metadata_log_event::do_update_pos(Relay_log_info *rli)
+{
+  rli->inc_event_relay_log_pos();
+  return 0;
+}
+
+void Table_metadata_log_event::pack_info(Protocol *protocol)
+{
+  size_t len;
+  char buf[32];
+
+  len= my_snprintf(buf, sizeof(buf), "table_id: %lu", get_table_id());
+
+  protocol->store(buf, len, &my_charset_bin);
+}
+
+#endif /* MYSQL_SERVER && HAVE_REPLICATION */
+
+/**
+  Read a Table_metadata event from a data buffer.
+
+  @param event  The event data buffer.
+  @param event_len  Length of the event data buffer.
+  @param description_event Format description event that describes this event.
+
+  @remark The data buffer ownership is transferred to this event.
+
+  @return FALSE on success, TRUE otherwise.
+*/
+bool
+Table_metadata_log_event::read(
+  const char *event,
+  uint event_len,
+  const Format_description_log_event *description_event)
+{
+  uint8   common_header_len;
+  uint8   data_header_len;
+  uint32  data_body_len= 0;
+
+  /* Event header. */
+  common_header_len= description_event->common_header_len;
+  /* Fixed-length data header. */
+  data_header_len= description_event->post_header_len[TABLE_METADATA_EVENT-1];
+
+  /* Size of the variable-length data body. */
+  if (event_len > (common_header_len + data_header_len))
+    data_body_len= event_len - (common_header_len + data_header_len);
+
+  if (!read_data_header(event + common_header_len, data_header_len))
+    read_data_body(event + common_header_len + data_header_len, data_body_len);
+
+  return (m_column_descriptor == NULL);
+}
+
+/**
+  Read the data header of a Table_metadata event.
+
+  @param buf      The data header buffer.
+  @param buf_len  Length of the data header buffer.
+
+  @return FALSE on success, TRUE otherwise.
+*/
+bool
+Table_metadata_log_event::read_data_header(const char *buf, uint buf_len)
+{
+  DBUG_ENTER("Table_metadata_log_event::read_data_header");
+
+  if (buf_len < DH_FIXED_LENGTH)
+    DBUG_RETURN(true);
+
+  m_data_header.table_id= uint6korr(buf + DH_TABLE_ID_OFFSET);
+  m_data_header.columns= uint2korr(buf + DH_COLUMNS_OFFSET);
+  m_data_header.flags= uint2korr(buf + DH_FLAGS_OFFSET);
+
+  DBUG_RETURN(m_data_header.columns == 0);
+}
+
+/**
+  Read a length-prefixed string from a data buffer.
+
+  @param var      Pointer to and length of the string.
+  @param buf      Reference to the data buffer.
+  @param buf_len  Reference to the length of the buffer.
+
+  @return FALSE on success, TRUE otherwise.
+*/
+bool
+Table_metadata_log_event::read_length_encoded_string(
+  LEX_CSTRING *var,
+  const char *buf,
+  uint buf_len)
+{
+  const char *str= buf;
+  DBUG_ENTER("Table_metadata_log_event::read_length_encoded_string");
+
+  if (buf_len == 0)
+    DBUG_RETURN(true);
+
+  var->length= get_string_field_length(&str, buf_len);
+
+  if (var->length == UINT_MAX)
+    DBUG_RETURN(true);
+
+  /* Account for the length prefix. */
+  buf_len-= (str - buf);
+
+  if (var->length > buf_len)
+    DBUG_RETURN(true);
+
+  var->str= str;
+
+  DBUG_RETURN(false);
+}
+
+/**
+  Read a column descriptor portion the event data.
+
+  @param descriptor A column descriptor object.
+  @param buf        The data buffer.
+  @param buf_len    Length of the buffer.
+
+  @return FALSE on success, TRUE otherwise.
+*/
+bool
+Table_metadata_log_event::read_column_descriptor(
+  Column_descriptor *descriptor,
+  const char *buf,
+  uint buf_len)
+{
+  uint index, length;
+  LEX_CSTRING *string_array[]=
+    {&descriptor->name, &descriptor->type_name, &descriptor->comment};
+  DBUG_ENTER("Table_metadata_log_event::read_column_descriptor");
+
+  if (buf_len < CD_FIXED_LENGTH)
+    DBUG_RETURN(true);
+
+  descriptor->length= uint4korr(buf + CD_LENGTH_OFFSET);
+  descriptor->type= *(buf + CD_TYPE_OFFSET);
+  descriptor->display_length= uint4korr(buf + CD_DISPLAY_LENGTH_OFFSET);
+  descriptor->scale= *(buf + CD_SCALE_OFFSET);
+  descriptor->charset= uint2korr(buf + CD_CHARSET_OFFSET);
+  descriptor->flags= uint2korr(buf + CD_FLAGS_OFFSET);
+
+  if (buf_len < descriptor->length)
+    DBUG_RETURN(true);
+
+  buf+= CD_FIXED_LENGTH;
+  buf_len-= CD_FIXED_LENGTH;
+
+  for (index= 0; index < array_elements(string_array); index++)
+  {
+    if (read_length_encoded_string(string_array[index], buf, buf_len))
+      break;
+
+    length= length_of_encoded_string(string_array[index]->length);
+
+    /* Skip over the string data. */
+    buf+= length; buf_len-= length;
+  }
+
+  DBUG_RETURN(index != array_elements(string_array));
+}
+
+/**
+  Read the data body of a table_metadata event.
+
+  @param buf      the data header buffer.
+  @param buf_len  length of the data header buffer.
+
+  @return false on success, true otherwise.
+*/
+void
+Table_metadata_log_event::read_data_body(const char *buf, uint buf_len)
+{
+  uint16 column;
+  Column_descriptor *descriptor;
+  DBUG_ENTER("Table_metadata_log_event::read_data_body");
+
+  m_column_descriptor= (Column_descriptor *)
+    my_malloc(m_data_header.columns * sizeof(Column_descriptor),
+              MYF(MY_ZEROFILL | MY_WME));
+
+  if (m_column_descriptor == NULL)
+    DBUG_VOID_RETURN;
+
+  for (column= 0; column < m_data_header.columns; column++)
+  {
+    descriptor= &m_column_descriptor[column];
+
+    if (read_column_descriptor(descriptor, buf, buf_len))
+      break;
+
+    /* Skip over any unread data. */
+    buf+= descriptor->length; buf_len-= descriptor->length;
+  }
+
+  if (column != m_data_header.columns)
+  {
+    my_free(m_column_descriptor);
+    m_column_descriptor= NULL;
+  }
+
+  DBUG_VOID_RETURN;
+}
+
+#if defined(MYSQL_CLIENT)
+
+/**
+  Print information (header and body) about this event.
+
+  @param stream   Output stream.
+  @param print_event_info   Print context.
+*/
+void
+Table_metadata_log_event::print_helper(
+  FILE *stream,
+  PRINT_EVENT_INFO *print_event_info)
+{
+  Column_descriptor *descriptor;
+  Table_map_log_event *table_map;
+  ulong table_map_id= get_table_id();
+  IO_CACHE *head_cache= &print_event_info->head_cache;
+  IO_CACHE *body_cache= &print_event_info->body_cache;
+  DBUG_ENTER("Table_metadata_log_event::print_helper");
+
+  if (!(table_map= print_event_info->m_table_map.get_table(table_map_id)))
+    table_map= print_event_info->m_table_map_ignored.get_table(table_map_id);
+
+  print_header(head_cache, print_event_info, TRUE);
+
+  if (table_map)
+    my_b_printf(head_cache, "\tTable_metadata: `%s`.`%s` (",
+                table_map->get_db_name(), table_map->get_table_name());
+  else
+    my_b_printf(head_cache, "\tTable_metadata: %lu (", table_map_id);
+
+  for (uint column= 0; column < m_data_header.columns; column++)
+  {
+    descriptor= get_column_descriptor(column);
+    if (column) my_b_write(head_cache, ", ", 2);
+    my_b_printf(head_cache, "`%.*b` %.*b",
+                descriptor->name.length, descriptor->name.str,
+                descriptor->type_name.length, descriptor->type_name.str);
+  }
+
+  my_b_write(head_cache, ")\n", 2);
+
+  print_base64(body_cache, print_event_info, TRUE);
+
+  DBUG_VOID_RETURN;
+}
+
+#endif /* MYSQL_CLIENT */
+
+
+/**************************************************************************
 	Write_rows_log_event member functions
 **************************************************************************/
 
Index: sql/log_event.h
===================================================================
--- sql/log_event.h	(revision 476)
+++ sql/log_event.h	(working copy)
@@ -257,6 +257,7 @@
 #define EXECUTE_LOAD_QUERY_HEADER_LEN  (QUERY_HEADER_LEN + EXECUTE_LOAD_QUERY_EXTRA_HEADER_LEN)
 #define INCIDENT_HEADER_LEN    2
 #define HEARTBEAT_HEADER_LEN   0
+#define TABLE_METADATA_HEADER_LEN Table_metadata_binary_format::DH_FIXED_LENGTH
 /* 
   Max number of possible extra bytes in a replication event compared to a
   packet (i.e. a query) sent from client to master;
@@ -594,7 +595,8 @@
     to ensure master's online status to slave 
   */
   HEARTBEAT_LOG_EVENT= 27,
-  
+ 
+  TABLE_METADATA_EVENT= 50,
   /*
     Add new events here - right above this comment!
     Existing events (except ENUM_END_EVENT) should never change their numbers
@@ -624,6 +626,7 @@
 
 class Format_description_log_event;
 class Relay_log_info;
+class Table_metadata_log_event;
 
 #ifdef MYSQL_CLIENT
 enum enum_base64_output_mode {
@@ -3456,6 +3459,9 @@
 
 #ifdef MYSQL_CLIENT
   virtual void print(FILE *file, PRINT_EVENT_INFO *print_event_info);
+  void set_table_metadata_event(Table_metadata_log_event *event)
+  { m_table_metadata= event; }
+  LEX_CSTRING get_column_name(uint column) const;
 #endif
 
 
@@ -3489,10 +3495,224 @@
   ulong          m_field_metadata_size;   
   uchar         *m_null_bits;
   uchar         *m_meta_memory;
+#ifdef MYSQL_CLIENT
+  Table_metadata_log_event *m_table_metadata;
+#endif
 };
 
 
 /**
+ @struct Table_metadata_binary_format
+
+ A table metadata log event consists of a fixed-length data header and one
+ or more column descriptor sections of variable length.
+
+ +-------------+--------------+-----------------------+---------------------+
+ | Byte Offset | Width (bits) | Field Name            | Data Type           |
+ +-------------+--------------+-----------------------+---------------------+
+ |     0-5     |      48      | Table Map ID          | Unsigned Integer    |
+ |     6-7     |      16      | Number of Columns (N) | Unsigned Integer    |
+ |     8-9     |      16      | Flags                 | Bit Field           |
+ |     9 +     |   Variable   | Column Descriptor [1] | Column Descriptor   |
+ |     ...     |      ...     | Column Descriptor [2] | Column Descriptor   |
+ |     ...     |      ...     | ...                   | ...                 |
+ |     ...     |      ...     | Column Descriptor [N] | Column Descriptor   |
+ +-------------+--------------+-----------------------+---------------------+
+
+
+  Each column descriptor section represents the metadata (type and properties)
+  of a column in the table described by the event.
+
+  +-------------+--------------+-----------------------+---------------------+
+  | Byte Offset | Width (bits) | Field Name            | Data Type           |
+  +-------------+--------------+-----------------------+---------------------+
+  |     0-3     |      32      | Descriptor Length     | Unsigned integer    |
+  |     4-4     |       8      | Data Type             | Unsigned integer    |
+  |     5-8     |      32      | Display Length        | Unsigned integer    |
+  |     9-9     |       8      | Scale                 | Unsigned integer    |
+  |   10-11     |      16      | Character Set Number  | Unsigned integer    |
+  |   12-13     |      16      | Flags                 | Bit Field           |
+  |    14 +     |   Variable   | Column Name           | Length coded string |
+  |     ...     |   Variable   | SQL Type Name         | Length coded string |
+  |     ...     |   Variable   | Column Comment        | Length coded string |
+  +-------------+--------------+-----------------------+---------------------+
+
+  @remarks
+
+  In order to allow future backwards compatibility, the descriptor length must
+  be used as an offset to the next column descriptor.
+
+  If the column is a numeric data type, the display length is equivalent to the
+  maximum precision of the column (number of decimal digits).
+
+  The variable length strings are encoded in UTF8, which is the character set
+  used by the server for storing identifiers (see character_set_system).
+*/
+struct Table_metadata_binary_format
+{
+  /** Fixed-length data header. */
+  struct Data_header
+  {
+    /** Number that identifies the table, @see Table_map_log_event. */
+    ulonglong table_id;
+    /** Number of column descriptor sections. Hence, number of columns. */
+    uint16    columns;
+    /** A bit field reserved for future use. Must be zero. */
+    uint16    flags;
+  };
+
+  /** Offset of the data header fields. */
+  enum Data_header_offset
+  {
+    DH_TABLE_ID_OFFSET =  0,
+    DH_COLUMNS_OFFSET  =  6,
+    DH_FLAGS_OFFSET    =  8,
+    DH_FIXED_LENGTH    = 10
+  };
+
+  /** Column Descriptor. */
+  struct Column_descriptor
+  {
+    /** Size in bytes of the descriptor. */
+    uint32  length;
+    /** Code of the data type, @see enum_field_types. */
+    uint8   type;
+    /** The defined maximum display length of the column. */
+    uint32  display_length;
+    /** If a decimal type, the number of decimal digits in the fractional part. */
+    uint8   scale;
+    /** Number of the column character set. */
+    uint16  charset;
+    /** A bit field representing attributes of the column (e.g. is a key). */
+    uint16  flags;
+    /** Name of the column. */
+    LEX_CSTRING name;
+    /** Name of the SQL data type. */
+    LEX_CSTRING type_name;
+    /** The comment associated with the column. */
+    LEX_CSTRING comment;
+  };
+
+  /** Offset of the column descriptor fields. */
+  enum Column_descriptor_offset
+  {
+    CD_LENGTH_OFFSET         =  0,
+    CD_TYPE_OFFSET           =  4,
+    CD_DISPLAY_LENGTH_OFFSET =  5,
+    CD_SCALE_OFFSET          =  9,
+    CD_CHARSET_OFFSET        = 10,
+    CD_FLAGS_OFFSET          = 12,
+    CD_FIXED_LENGTH          = 14
+  };
+};
+
+
+/**
+  @class Table_metadata_log_event
+
+  The purpose of the Table_metadata_log_event event is to transmit
+  information about the types and properties of the columns in a table.
+*/
+class Table_metadata_log_event
+  : public Log_event,
+    protected Table_metadata_binary_format
+{
+public:
+#if defined(MYSQL_SERVER)
+  /**
+    Constructor, used to initialize an event for writing to the binary log.
+
+    @param thd    The current thread.
+    @param table  Table object whose (column) metadata is being described.
+    @param is_transactional   Whether the cache is transactional.
+  */
+  Table_metadata_log_event(THD *thd, TABLE *table, bool is_transactional)
+    : Log_event(thd, LOG_EVENT_SUPPRESS_USE_F, is_transactional),
+      m_is_valid(false), m_column_descriptor(NULL), m_table(table)
+  {}
+#endif
+
+  /**
+    Constructor, used to initialize an event for reading from the binary log.
+
+    @param event  The event data buffer.
+    @param event_len  Length of the event data buffer.
+    @param description_event Format description event that describes this event.
+  */
+  Table_metadata_log_event(const char *event, uint event_len,
+                           const Format_description_log_event *description_event)
+    : Log_event(event, description_event),
+      m_column_descriptor(NULL)
+  {
+    m_is_valid= !read(event, event_len, description_event);
+  }
+
+  virtual ~Table_metadata_log_event()
+  {
+    my_free(m_column_descriptor);
+  }
+
+  Log_event_type get_type_code() { return TABLE_METADATA_EVENT; }
+  bool is_valid() const          { return m_is_valid; }
+  ulong get_table_id() const     { return m_data_header.table_id; }
+
+#if defined(MYSQL_SERVER)
+  int get_data_size();
+#endif
+
+#if defined(MYSQL_SERVER) && defined(HAVE_REPLICATION)
+  enum_skip_reason do_shall_skip(Relay_log_info *rli)
+  {
+    return continue_group(rli);
+  }
+
+  int do_update_pos(Relay_log_info *rli);
+
+  void pack_info(Protocol *protocol);
+#endif
+
+#if defined(MYSQL_CLIENT)
+  Column_descriptor *get_column_descriptor(uint column) const
+  {
+    return (column < m_data_header.columns) ?
+           &m_column_descriptor[column] : NULL;
+  }
+
+  void print(FILE *stream, PRINT_EVENT_INFO *print_event_info)
+  {
+    if (!print_event_info->short_form)
+      print_helper(stream, print_event_info);
+  }
+
+  void print_helper(FILE *, PRINT_EVENT_INFO *);
+#endif
+
+private:
+  bool read(const char *, uint, const Format_description_log_event *);
+  bool read_data_header(const char *, uint);
+  void read_data_body(const char *, uint);
+  bool read_column_descriptor(Column_descriptor *, const char *, uint);
+  bool read_length_encoded_string(LEX_CSTRING *, const char *, uint);
+
+private:
+  bool m_is_valid;
+  Data_header m_data_header;
+  Column_descriptor *m_column_descriptor;
+
+#if defined(MYSQL_SERVER)
+private:
+  struct Data_size_functor;
+  struct Data_body_functor;
+
+  bool write_data_header(IO_CACHE *);
+  bool write_data_body(IO_CACHE *);
+
+private:
+  TABLE *m_table;
+#endif
+};
+
+/**
   @class Rows_log_event
 
  Common base class for all row-containing log events.
@@ -3573,6 +3793,7 @@
                      PRINT_EVENT_INFO *print_event_info);
   size_t print_verbose_one_row(IO_CACHE *file, table_def *td,
                                PRINT_EVENT_INFO *print_event_info,
+				Table_map_log_event *map,
                                MY_BITMAP *cols_bitmap,
                                const uchar *ptr, const uchar *prefix);
 #endif
Index: sql/sql_class.h
===================================================================
--- sql/sql_class.h	(revision 476)
+++ sql/sql_class.h	(working copy)
@@ -506,6 +506,7 @@
 
   double long_query_time_double;
 
+  my_bool binlog_row_write_table_metadata;
 } SV;
 
 
@@ -1594,6 +1595,7 @@
   void binlog_start_trans_and_stmt();
   void binlog_set_stmt_begin();
   int binlog_write_table_map(TABLE *table, bool is_transactional);
+  int binlog_write_table_metadata(TABLE *table, bool is_transactional);
   int binlog_write_row(TABLE* table, bool is_transactional,
                        MY_BITMAP const* cols, size_t colcnt,
                        const uchar *buf);
Index: sql/sys_vars.cc
===================================================================
--- sql/sys_vars.cc	(revision 476)
+++ sql/sys_vars.cc	(working copy)
@@ -450,6 +450,12 @@
        CMD_LINE(OPT_ARG), DEFAULT(FALSE),
        NO_MUTEX_GUARD, NOT_IN_BINLOG, ON_CHECK(binlog_direct_check));
 
+static Sys_var_mybool Sys_binlog_rows_table_metadata(
+       "binlog_rows_table_metadata_events",
+       "Write Table_metadata events to the binary log.",
+       SESSION_VAR(binlog_row_write_table_metadata),
+       CMD_LINE(OPT_ARG), DEFAULT(FALSE));
+
 static Sys_var_ulong Sys_bulk_insert_buff_size(
        "bulk_insert_buffer_size", "Size of tree cache used in bulk "
        "insert optimisation. Note that this is a limit per thread!",
